import z from 'zod/v3'

export const dataPartSchema = z.object({
  'create-sandbox': z.object({
    sandboxId: z.string().optional(),
    status: z.enum(['loading', 'done', 'error']),
    error: z.string().optional(),
    restored: z.boolean().optional(), // if session was restored in new sandbox
  }),
  'generating-files': z.object({
    paths: z.array(z.string()),
    status: z.enum(['generating', 'uploading', 'uploaded', 'done']),
    error: z.string().optional(),
  }),
  'execute-command': z.object({
    command: z.string(),
    args: z.array(z.string()),
    status: z.enum(['loading', 'done']),
    sandboxId: z.string(),
    commandId: z.string().optional(),
    terminalId: z.string().optional(),
    analysis: z.string().optional(),
    expectedBehavior: z.string().optional(),
    exitCode: z.number().optional(),
    success: z.boolean().optional(),
    isRunning: z.boolean().optional(),
    duration: z.number().optional(),
    error: z.string().optional(),
  }),
  'get-sandbox-url': z.object({
    url: z.string().optional(),
    status: z.enum(['loading', 'done']),
    error: z.string().optional(),
  }),
  'read-file': z.object({
    path: z.string(),
    sandboxId: z.string(),
    status: z.enum(['loading', 'done']),
    content: z.string().optional(),
    error: z.string().optional(),
  }),
  'edit-file': z.object({
    path: z.string(),
    sandboxId: z.string(),
    status: z.enum(['loading', 'done']),
    edits: z.array(z.object({
      search: z.string(),
      replace: z.string(),
    })).optional(),
    rawContent: z.string().optional(),
    error: z.string().optional(),
  }),
  'search-files': z.object({
    path: z.string(),
    regex: z.string(),
    sandboxId: z.string(),
    status: z.enum(['loading', 'done']),
    filePattern: z.string().optional(),
    results: z.array(z.object({
      file: z.string(),
      line: z.number(),
      content: z.string(),
      context: z.array(z.string()).optional(),
    })).optional(),
    error: z.string().optional(),
  }),
  'list-files': z.object({
    path: z.string(),
    sandboxId: z.string(),
    status: z.enum(['loading', 'done']),
    recursive: z.boolean().optional(),
    files: z.array(z.object({
      name: z.string(),
      type: z.enum(['file', 'directory']),
      path: z.string(),
      size: z.number().optional(),
    })).optional(),
    error: z.string().optional(),
  }),
  'browser-action': z.object({
    action: z.enum(['launch', 'click', 'type', 'scroll_down', 'scroll_up', 'close']),
    url: z.string().optional(),
    coordinate: z.string().optional(),
    text: z.string().optional(),
    status: z.enum(['loading', 'done']),
    result: z.string().optional(),
    screenshot: z.string().optional(),
    logs: z.string().optional(),
    currentUrl: z.string().optional(),
    currentMousePosition: z.string().optional(),
    executionSuccess: z.boolean().optional(),
    errorMessage: z.string().optional(),
  }),
  'fetch-online-refs': z.object({
    query: z.string(),
    preferred_domains: z.array(z.string()).optional(),
    status: z.enum(['loading', 'done']),
    result: z.string().optional(),
    error: z.string().optional(),
    timestamp: z.string().optional(),
  }),
  'create-file': z.object({
    path: z.string(),
    sandboxId: z.string(),
    status: z.enum(['loading', 'done']),
    error: z.string().optional(),
    lintResults: z.array(z.object({
      line: z.number(),
      column: z.number(),
      message: z.string(),
      rule: z.string().optional(),
      severity: z.enum(['error', 'warning', 'info']),
    })).optional(),
  }),
  'delete-file': z.object({
    path: z.string(),
    sandboxId: z.string(),
    status: z.enum(['loading', 'done']),
    error: z.string().optional(),
  }),
  'create-terminal': z.object({
    name: z.string(),
    sandboxId: z.string(),
    status: z.enum(['loading', 'done']),
    terminalId: z.string().optional(),
    workingDirectory: z.string().optional(),
    duration: z.number().optional(),
    error: z.string().optional(),
  }),
  'generate-image': z.object({
    prompt: z.string(),
    status: z.enum(['loading', 'generating', 'done']),
    imageUrl: z.string().optional(),
    markdown: z.string().optional(),
    error: z.string().optional(),
    duration: z.number().optional(),
  }),
  'process-placeholder-images': z.object({
    sandboxId: z.string(),
    status: z.enum(['loading', 'scanning', 'generating', 'replacing', 'done']),
    totalPlaceholders: z.number().optional(),
    successfulReplacements: z.number().optional(),
    failedReplacements: z.number().optional(),
    processedFiles: z.array(z.string()).optional(),
    currentFile: z.string().optional(),
    error: z.string().optional(),
    duration: z.number().optional(),
  }),
  'list-terminals': z.object({
    sandboxId: z.string(),
    status: z.enum(['loading', 'done']),
    terminals: z.array(z.object({
      terminalId: z.string(),
      name: z.string(),
      workingDirectory: z.string(),
      status: z.enum(['created', 'ready', 'busy', 'error', 'idle']),
      createdAt: z.string(),
    })).optional(),
    duration: z.number().optional(),
    error: z.string().optional(),
  }),
  'terminal-execute': z.object({
    terminalId: z.string(),
    sandboxId: z.string(),
    command: z.string(),
    status: z.enum(['loading', 'streaming', 'done']),
    output: z.string().optional(),
    exitCode: z.number().optional(),
    error: z.string().optional(),
    timestamp: z.string().optional(),
  }),
  'error-message': z.object({
    error: z.string(),
    retryCount: z.number().optional(),
    isHighDemand: z.boolean().optional(),
    status: z.enum(['error', 'retrying', 'failed']),
  })
})

export type DataPart = z.infer<typeof dataPartSchema>
